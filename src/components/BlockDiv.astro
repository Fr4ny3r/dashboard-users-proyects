---
import Play from '../assets/play.svg'
---

    <canvas  class="canvas w-full "></canvas>
        <span class="canvas-span bg-black/50 opacity-0 py-6.5 px-7 text-white scale-300 absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2 ">
            <Play/>
        </span>


        <style>
        
        .canvas-span{
            transition: all .3s;
        }


        .canvas-span:hover{
            opacity: 100;
            cursor: pointer;
        
        }

        </style>

<script>



const canvas = document.querySelector('canvas') as HTMLCanvasElement;
const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;

const blockSize = 40
const boardWidth = 10
const boardHeight = 10

canvas.width = blockSize * boardWidth
canvas.height = blockSize * boardHeight

ctx.scale(blockSize, blockSize);

const board = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

];

const pieza = {
    position: {x: 0, y: 0},
    forma: [
        [1]
    ]
}

const food = {
    position: {x: Math.floor(Math.random()*10), y: Math.floor(Math.random()*10)},
    forma: [
        [2]
    ]
}

let dropCounter = 0;
let lastTime = 0;


function movePiezaTowardFood() {
    const dx = food.position.x - pieza.position.x;
    const dy = food.position.y - pieza.position.y;
    if (Math.abs(dx) > Math.abs(dy)) {
        pieza.position.x += Math.sign(dx);
        board[pieza.position.y][pieza.position.x] = 1
    } else if (dy !== 0) {
        pieza.position.y += Math.sign(dy);
        board[pieza.position.y][pieza.position.x] = 1
    }
}

function checkFoodCollision() {
    return pieza.position.x === food.position.x && pieza.position.y === food.position.y;
}

function placeFood() {
    let xx, yy;
    do {
        xx = Math.floor(Math.random() * boardWidth);
        yy = Math.floor(Math.random() * boardHeight);
    } while (xx === pieza.position.x && yy === pieza.position.y);
    food.position.x = xx;
    food.position.y = yy;
    board.forEach(row => row.fill(0));
    board[food.position.y][food.position.x] = 2;
}
let requestId : number;

function update(time = 0) {
    const deltaTime = time - lastTime;
    lastTime = time;
    dropCounter += deltaTime;

    if (dropCounter > 200) {
        movePiezaTowardFood();
        if (checkFoodCollision()) {
            placeFood();
        }
        dropCounter = 0;
    }

    draw();
    requestId = window.requestAnimationFrame(update);
}


function draw(){
    ctx.fillStyle = '#000';
    ctx.fillRect(0, 0, canvas.width, canvas.height);



    board.forEach((row, y) => {
        row.forEach((value, x)=>{
            if (value === 1){
                ctx.fillStyle = '#5f5'
                // ctx.fillStyle = '#20a'
                ctx.fillRect(x, y, 1, 1)
            }
        })

    pieza.forma.forEach((row,y)=>{
        row.forEach((value, x) => {
            if (value){
                // ctx.fillStyle = '#20f'
                ctx.fillStyle = '#0D0'
                ctx.fillRect(x + pieza.position.x, y + pieza.position.y, 1, 1)
            }
        });
    })

    food.forma.forEach((row,y)=>{
        row.forEach((value, x) => {
            if (value === 2){
                ctx.fillStyle = '#f00'
                ctx.fillRect(x + food.position.x, y + food.position.y, 1, 1)
            }
        });
    })

    });

const playCanvas = false

}

update()

document.querySelector(".canvas-span")?.addEventListener("click", ()=>{
    if (requestId){
        cancelAnimationFrame(requestId)
        requestId = 0;
    }else{
update()
    }
})

    board[food.position.x][food.position.y] = 2




</script>